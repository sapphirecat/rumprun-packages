--- a/ext/opcache/config.m4	2016-08-13 10:25:09.980771183 -0400
+++ b/ext/opcache/config.m4	2016-08-13 10:17:18.120760933 -0400
@@ -29,7 +29,7 @@
   AC_CHECK_HEADERS([unistd.h sys/uio.h])
 
   AC_MSG_CHECKING(for sysvipc shared memory support)
-  AC_TRY_RUN([
+  AC_LINK_IFELSE([AC_LANG_SOURCE([[
 #include <sys/types.h>
 #include <sys/wait.h>
 #include <sys/ipc.h>
@@ -93,13 +93,13 @@
   }
   return 0;
 }
-],dnl
+]])],dnl
     AC_DEFINE(HAVE_SHM_IPC, 1, [Define if you have SysV IPC SHM support])
-    msg=yes,msg=no,msg=no)
+    msg=yes,msg=no)
   AC_MSG_RESULT([$msg])
 
   AC_MSG_CHECKING(for mmap() using MAP_ANON shared memory support)
-  AC_TRY_RUN([
+  AC_LINK_IFELSE([AC_LANG_SOURCE([[
 #include <sys/types.h>
 #include <sys/wait.h>
 #include <sys/mman.h>
@@ -145,13 +145,13 @@
   }
   return 0;
 }
-],dnl
+]])],dnl
     AC_DEFINE(HAVE_SHM_MMAP_ANON, 1, [Define if you have mmap(MAP_ANON) SHM support])
-    msg=yes,msg=no,msg=no)
+    msg=yes,msg=no)
   AC_MSG_RESULT([$msg])
 
   AC_MSG_CHECKING(for mmap() using /dev/zero shared memory support)
-  AC_TRY_RUN([
+  AC_LINK_IFELSE([AC_LANG_SOURCE([[
 #include <sys/types.h>
 #include <sys/wait.h>
 #include <sys/mman.h>
@@ -200,13 +200,13 @@
   }
   return 0;
 }
-],dnl
+]])],dnl
     AC_DEFINE(HAVE_SHM_MMAP_ZERO, 1, [Define if you have mmap("/dev/zero") SHM support])
-    msg=yes,msg=no,msg=no)
+    msg=yes,msg=no)
   AC_MSG_RESULT([$msg])
 
   AC_MSG_CHECKING(for mmap() using shm_open() shared memory support)
-  AC_TRY_RUN([
+  AC_LINK_IFELSE([AC_LANG_SOURCE([[
 #include <sys/types.h>
 #include <sys/wait.h>
 #include <sys/mman.h>
@@ -269,13 +269,13 @@
   }
   return 0;
 }
-],dnl
+]])],dnl
     AC_DEFINE(HAVE_SHM_MMAP_POSIX, 1, [Define if you have POSIX mmap() SHM support])
-    msg=yes,msg=no,msg=no)
+    msg=yes,msg=no)
   AC_MSG_RESULT([$msg])
 
   AC_MSG_CHECKING(for mmap() using regular file shared memory support)
-  AC_TRY_RUN([
+  AC_LINK_IFELSE([AC_LANG_SOURCE([[
 #include <sys/types.h>
 #include <sys/wait.h>
 #include <sys/mman.h>
@@ -338,12 +338,33 @@
   }
   return 0;
 }
-],dnl
+]])],dnl
     AC_DEFINE(HAVE_SHM_MMAP_FILE, 1, [Define if you have mmap() SHM support])
-    msg=yes,msg=no,msg=no)
+    msg=yes,msg=no)
   AC_MSG_RESULT([$msg])
 
 flock_type=unknown
+if test "x${build_alias}" != "x${host_alias}"; then
+AC_MSG_CHECKING([for host flock struct order])
+AC_LINK_IFELSE([AC_LANG_SOURCE([[
+#include <fcntl.h>
+
+int
+main()
+{
+char t[&((struct flock *)0)->l_start == 0 ? 1 : -1];
+return 0;
+}
+]])], [
+	flock_type=bsd
+    AC_DEFINE([HAVE_FLOCK_BSD], [], [Struct flock is BSD-type])
+    AC_MSG_RESULT("bsd")
+], [
+	flock_type=linux
+    AC_DEFINE([HAVE_FLOCK_LINUX], [], [Struct flock is Linux-type])
+    AC_MSG_RESULT("linux")
+])
+else
 AC_MSG_CHECKING("whether flock struct is linux ordered")
 AC_TRY_RUN([
   #include <fcntl.h>
@@ -375,6 +396,7 @@
     AC_DEFINE([HAVE_FLOCK_BSD], [], [Struct flock is BSD-type]) 
     AC_MSG_RESULT("yes")
 ], AC_MSG_RESULT("no") )
+fi
 
 if test "$flock_type" = "unknown"; then
 	AC_MSG_ERROR([Don't know how to define struct flock on this system[,] set --enable-opcache=no])
